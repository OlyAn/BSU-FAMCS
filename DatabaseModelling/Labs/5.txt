--Лабораторная выполняется в СУБД  Oracle. 
--Cкопируйте файл  FPMI-STUD\SUBFACULTY\каф ИСУ\Исаченко\Лабораторные\EDU4.sql  в каталог C:\TEMP .
--Раскройте файл и ознакомтесь со скриптом создания и заполнения таблиц для выполнения лабораторной. 
--Таблица Emp имеет дополнительные столбцы mstat (семейное положение), Nchild (количество несовершеннолетних детей).  
--Произведите запуск SQLPlus  и соеденитесь с БД под логином Scott и паролем Tiger.  Запустите скрипты EDU4.sql на выполнение.
--Вставте в эту строку Ваши ФИО, номер группы, курса. ФИО Анейчик Ольга Владимировна, группа 2, курс 4.      
--Файл с отчётом о выполнении лабораторной создаётся путём вставки скриптов, созданных Вами программ после пунктов 1-5.
--Файл отчёта именуется фамилией студента  в английской транскрипции, с расширением .txt и сохраняется в каталог  fpmi-serv604\comman_stud\исаченко\Лаб\группа_.                  .

--1. Создайте триггер, который при добавлении или обновлении записи в таблице EMP 
-- должен отменять действие и сообщать об ошибке:
--a) если для сотрудника с семейным положением холост (s)  в столбце Nchild указывается данное, отличное от NULL или 0;
--b) если для любого сотрудника указывается отрицательное количество детей.

CREATE OR REPLACE TRIGGER emp_trigger_1
BEFORE INSERT OR UPDATE ON emp
FOR EACH ROW
BEGIN
-- a
  IF (:new.mstat = 's' AND NOT(:new.nchild IS NULL OR :new.nchild = 0))
  THEN RAISE_APPLICATION_ERROR(-20000, 'холостяк не может иметь детей');
  END IF;
-- b
  IF (:new.nchild < 0)
  THEN RAISE_APPLICATION_ERROR(-20000, 'число детей должно быть неотрицательным');
  END IF;
END;

--2. Создайте триггер, который при добавлении или обновлении записи в таблице EMP должен:
-- a) осуществлять вставку данного равного 0,
--если для сотрудника с семейным положением холост (s)  в столбце Nchild указывается данное, отличное от NULL или 0;
--b) осуществлять вставку данного NULL,
--если для любого сотрудника указывается отрицательное количество детей.

CREATE OR REPLACE TRIGGER emp_trigger_2
BEFORE INSERT OR UPDATE ON emp
FOR EACH ROW
BEGIN
-- a
  IF (:new.mstat = 's' AND NOT(:new.nchild IS NULL OR :new.nchild = 0))
  THEN :new.nchild := 0;
  END IF;
-- b  
  IF (:new.nchild < 0)
  THEN :new.nchild := NULL;
  END IF;
END;

--3. Создайте триггер, который при обновлении записи в таблице EMP 
--должен отменять действие и сообщать об ошибке, если для сотрудников, находящихся в браке (m) в столбце Nchild 
--новое значение отличается от текущего более чем на 1.

CREATE OR REPLACE TRIGGER emp_trigger_3
BEFORE UPDATE ON emp FOR EACH ROW
BEGIN
  IF (:new.mstat = 'm' AND ABS(:new.nchild - :old.nchild) > 1)
  THEN RAISE_APPLICATION_ERROR(-20000, 'число детей не может измениться более чем на одного');
  END IF;
END;


--4. Создать триггер, который отменяет любые действия (начисление, изменение, удаление) с премиями (таблица bonus) 
-- неработающих в настоящий момент в организации сотрудников и сообщает об ошибке.

CREATE OR REPLACE TRIGGER bonus_trigger_4
BEFORE INSERT OR UPDATE OR DELETE ON bonus
FOR EACH ROW
DECLARE
  careers INTEGER;
BEGIN
  SELECT COUNT(*) into careers FROM career
  WHERE empno = :new.empno and enddate IS NULL;

  IF careers = 0
  THEN RAISE_APPLICATION_ERROR(-20000, 'человек больше не является сотрудником организации');
  END IF;
END;

--5. Создайте триггер, который до выполнения действия (вставка, обновление, удаление) с таблицей job
--создаёт запись в таблице temp_table, с указанием названия действия (delete, update, insert) активизирующего триггер.

CREATE OR REPLACE TRIGGER job_trigger_5
BEFORE INSERT OR UPDATE OR DELETE ON job
FOR EACH ROW
BEGIN
  IF INSERTING
  THEN INSERT INTO temp_table VALUES('insert');
  END IF;

  IF UPDATING
  THEN INSERT INTO temp_table VALUES('update');
  END IF;

  IF DELETING
  THEN INSERT INTO temp_table values('delete');
  END IF;
END;