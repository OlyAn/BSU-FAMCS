--лабораторная выполняется в СУБД  Oracle. 
--Скопируйте файлы  FPMI-stud\SUBFACULTY\каф ИСУ\Исаченко\Лабораторные\EDU3.sql  в каталог C:\TEMP .
--Раскройте файл и ознакомтесь со скриптом создания и заполнения таблиц для выполнения лабораторной. Таблица Bonus имеет дополнительный столбец tax (налог) со значениями null.  
--Запустите скрипт EDU3.sql на выполнение.
--Вставте в эту строку Ваши ФИО, номер группы, курса. ФИО Анейчик Ольга Владимировна, группа 2, курс 4.      
--Файл с отчётом о выполнении лабораторной создаётся путём вставки скриптов, созданных Вами программ после пунктов 1a), 1b), 1c), 2), 3), 4).
--Файл отчёта именуется фамилией студента  в английской транскрипции, с расширением .txt и сохраняется в каталог  fpmi-serv604\comman_stud\исаченко\Лаб\Гр_.
--Вам необходимо создать блоки и подпрограммы для начисления налога на прибыль и занесения его в столюец Tax соответсвующуй записи таблицы Bonus.
--Налог вычисляется по следующему правилу: 
--налог равен 9% от начисленной  в месяце премии, если суммарная премия с начала года до конца рассматриваемого месяца не превышает 500;
--налог равен 12% от начисленной  в месяце премии, если суммарная премия с начала года до конца рассматриваемого месяца больше 500, но не превышает 1 000;
--налог равен 15% от начисленной  в месяце премии, если суммарная премия с начала года до конца рассматриваемого месяца  больше 1 000.

--1.	Составьте в виде неименованного блока программу вычисления налога и вставки его в таблицу Bonus:
--a) с помощью простого цикла (loop) с курсором, оператора if и опретора case;
DECLARE
CURSOR bonusCursor IS
    SELECT bc.empno, bc.month, bc.year, SUM(b.bonvalue) AS bonus_sum
    FROM bonus bc JOIN bonus b
        ON b.empno = bc.empno AND b.year = bc.year AND b.month <= bc.month
        GROUP BY bc.empno, bc.month, bc.year;

i bonusCursor % ROWTYPE;
taxPercent REAL := 0;
BEGIN OPEN bonusCursor;
  LOOP FETCH bonusCursor INTO i;
    EXIT WHEN bonusCursor % NOTFOUND;
    IF i.bonus_sum <= 500 THEN taxPercent := 0.09;
    ELSIF i.bonus_sum <= 1000 THEN taxPercent := 0.12;
    ELSE taxPercent := 0.15;
    END IF;

    UPDATE bonus SET tax = bonvalue * taxPercent
    WHERE empno = i.empno AND year = i.year AND month = i.month;
  END LOOP;
CLOSE bonusCursor;
END;
/
SELECT * FROM bonus;

DECLARE
CURSOR bonusCursor IS
    SELECT bc.empno, bc.month, bc.year, SUM(b.bonvalue) AS bonus_sum
    FROM bonus bc JOIN bonus b
        ON b.empno = bc.empno AND b.year = bc.year AND b.month <= bc.month
        GROUP BY bc.empno, bc.month, bc.year;

i bonusCursor % ROWTYPE;
taxPercent REAL := 0;
BEGIN OPEN bonusCursor;
  LOOP FETCH bonusCursor INTO i;
    EXIT WHEN bonusCursor % NOTFOUND;
    CASE
        WHEN i.bonus_sum <= 500 THEN taxPercent := 0.09;
        WHEN i.bonus_sum <= 1000 THEN taxPercent := 0.12;
        ELSE taxPercent := 0.15;
    END CASE;

    UPDATE bonus SET tax = bonvalue * taxPercent
    WHERE empno = i.empno AND year = i.year AND month = i.month;
  END LOOP;
CLOSE bonusCursor;
END;
/
SELECT * FROM bonus;

-- b)   с помощью курсорного цикла FOR;
DECLARE
CURSOR bonusCursor IS
    SELECT bc.empno, bc.month, bc.year, SUM(b.bonvalue) AS bonus_sum
    FROM bonus bc JOIN bonus b
        ON b.empno = bc.empno AND b.year = b.year AND b.month <= b.month
        GROUP BY bc.empno, bc.month, bc.year;

taxPercent REAL := 0;
BEGIN
  FOR i IN bonusCursor LOOP
    CASE
        WHEN i.bonus_sum <= 500 THEN taxPercent := 0.09;
        WHEN i.bonus_sum <= 1000 THEN taxPercent := 0.12;
        ELSE taxPercent := 0.15;
    END CASE;

    UPDATE bonus SET tax = bonvalue * taxPercent
    WHERE empno = i.empno AND year = i.year AND month = i.month;
  END LOOP;
END;
/
SELECT * FROM bonus;

-- c) с помощью курсора с параметром, передавая номер сотрудника, для которого необходимо посчитать налог.
CREATE OR REPLACE PROCEDURE foo(emp_par IN INTEGER) IS
  CURSOR bonusCursor (emp_par INTEGER) IS
  SELECT bc.empno, bc.month, bc.year, SUM(b.bonvalue) AS bonus_sum
  FROM bonus bc JOIN bonus b
    ON b.empno = bc.empno AND b.year = bc.year AND b.month <= bc.month
    WHERE bc.empno = emp_par
    GROUP BY bc.empno, bc.month, bc.year;

  i bonusCursor % ROWTYPE;
  taxPercent REAL := 0;
  BEGIN OPEN bonusCursor(emp_par);
    LOOP FETCH bonusCursor INTO i;
        EXIT WHEN bonusCursor % NOTFOUND;
        CASE
            WHEN i.bonus_sum <= 500 THEN taxPercent := 0.09;
            WHEN i.bonus_sum <= 1000 THEN taxPercent := 0.12;
            ELSE taxPercent := 0.15;
        END CASE;

      UPDATE bonus SET tax = bonvalue * taxPercent
      WHERE empno = i.empno AND year = i.year AND month = i.month;
    END LOOP;
  CLOSE bonusCursor;
END foo;
/
CALL foo(102);
SELECT * FROM bonus WHERE empno = 102;
  
--2.   Оформите составленные программы в виде процедур Bonus_loop_if, Bonus_loop_case, Bonus_for, Bonus_cour(emp_par).

CREATE OR REPLACE PROCEDURE Bonus_loop_if IS
CURSOR bonusCursor IS
    SELECT bc.empno, bc.month, bc.year, SUM(b.bonvalue) AS bonus_sum
    FROM bonus bc JOIN bonus b
        ON b.empno = bc.empno AND b.year = bc.year AND b.month <= bc.month
        GROUP BY bc.empno, bc.month, bc.year;

i bonusCursor % ROWTYPE;
taxPercent REAL := 0;
BEGIN OPEN bonusCursor;
  LOOP FETCH bonusCursor INTO i;
    EXIT WHEN bonusCursor % NOTFOUND;
    IF i.bonus_sum <= 500 THEN taxPercent := 0.09;
    ELSIF i.bonus_sum <= 1000 THEN taxPercent := 0.12;
    ELSE taxPercent := 0.15;
    END IF;

    UPDATE bonus SET tax = bonvalue * taxPercent
    WHERE empno = i.empno AND year = i.year AND month = i.month;
  END LOOP;
CLOSE bonusCursor;
END Bonus_loop_if;
/
EXECUTE Bonus_loop_if;
SELECT * FROM bonus;


CREATE OR REPLACE PROCEDURE Bonus_loop_case IS
CURSOR bonusCursor IS
    SELECT bc.empno, bc.month, bc.year, SUM(b.bonvalue) AS bonus_sum
    FROM bonus bc JOIN bonus b
        ON b.empno = bc.empno AND b.year = bc.year AND b.month <= bc.month
        GROUP BY bc.empno, bc.month, bc.year;

i bonusCursor % ROWTYPE;
taxPercent REAL := 0;
BEGIN OPEN bonusCursor;
  LOOP FETCH bonusCursor INTO i;
    EXIT WHEN bonusCursor % NOTFOUND;
    CASE
        WHEN i.bonus_sum <= 500 THEN taxPercent := 0.09;
        WHEN i.bonus_sum <= 1000 THEN taxPercent := 0.12;
        ELSE taxPercent := 0.15;
    END CASE;

    UPDATE bonus SET tax = bonvalue * taxPercent
    WHERE empno = i.empno AND year = i.year AND month = i.month;
  END LOOP;
CLOSE bonusCursor;
END Bonus_loop_case;
/
EXECUTE Bonus_loop_case;
SELECT * FROM bonus;

CREATE OR REPLACE PROCEDURE Bonus_loop_for IS
CURSOR bonusCursor IS
    SELECT bc.empno, bc.month, bc.year, SUM(b.bonvalue) AS bonus_sum
    FROM bonus bc JOIN bonus b
        ON b.empno = bc.empno AND b.year = b.year AND b.month <= b.month
        GROUP BY bc.empno, bc.month, bc.year;

taxPercent REAL := 0;
BEGIN
  FOR i IN bonusCursor LOOP
    CASE
        WHEN i.bonus_sum <= 500 THEN taxPercent := 0.09;
        WHEN i.bonus_sum <= 1000 THEN taxPercent := 0.12;
        ELSE taxPercent := 0.15;
    END CASE;

    UPDATE bonus SET tax = bonvalue * taxPercent
    WHERE empno = i.empno AND year = i.year AND month = i.month;
  END LOOP;
END Bonus_loop_for;
/
EXECUTE Bonus_loop_for;
SELECT * FROM bonus;

CREATE OR REPLACE PROCEDURE Bonus_cour(emp_par IN INTEGER) IS
  CURSOR bonusCursor (emp_par INTEGER) IS
  SELECT bc.empno, bc.month, bc.year, SUM(b.bonvalue) AS bonus_sum
  FROM bonus bc JOIN bonus b
    ON b.empno = bc.empno AND b.year = bc.year AND b.month <= bc.month
    WHERE bc.empno = emp_par
    GROUP BY bc.empno, bc.month, bc.year;

  i bonusCursor % ROWTYPE;
  taxPercent REAL := 0;
  BEGIN OPEN bonusCursor(emp_par);
    LOOP FETCH bonusCursor INTO i;
        EXIT WHEN bonusCursor % NOTFOUND;
        CASE
            WHEN i.bonus_sum <= 500 THEN taxPercent := 0.09;
            WHEN i.bonus_sum <= 1000 THEN taxPercent := 0.12;
            ELSE taxPercent := 0.15;
        END CASE;

      UPDATE bonus SET tax = bonvalue * taxPercent
      WHERE empno = i.empno AND year = i.year AND month = i.month;
    END LOOP;
  CLOSE bonusCursor;
END Bonus_cour;
/
CALL Bonus_cour(102);
SELECT * FROM bonus WHERE empno = 102;


--3.   Создайте процедуру Bonus_emp(perc1, perc2, perc3, emp_par), вычисления налога и вставки его в таблицу Bonus за всё время начислений для конкретного сотрудника. 
--В качестве параметров передать проценты налога (до 500, от 501 до 1000, выше 1000), номер сотрудника.

CREATE OR REPLACE PROCEDURE Bonus_emp(perc1 IN REAL, perc2 IN REAL, perc3 IN REAL, emp_par IN INTEGER) IS
  CURSOR bonusCursor (emp_par INTEGER) IS
  SELECT bc.empno, bc.month, bc.year, SUM(b.bonvalue) AS bonus_sum
  FROM bonus bc JOIN bonus b
    ON b.empno = bc.empno AND b.year = bc.year AND b.month <= bc.month
    WHERE bc.empno = emp_par
    GROUP BY bc.empno, bc.month, bc.year;

  i bonusCursor % ROWTYPE;
  taxPercent REAL := 0;

  BEGIN OPEN bonusCursor(emp_par);
    LOOP FETCH bonusCursor INTO i;
      EXIT WHEN bonusCursor % NOTFOUND;
      IF i.bonus_sum <= 500 THEN taxPercent := perc1;
      ELSIF i.bonus_sum <= 1000 THEN taxPercent := perc2;
      ELSE taxPercent := perc3;
      END IF;

      UPDATE bonus SET tax = bonvalue * taxPercent
      WHERE empno = i.empno AND year = i.year AND month = i.month;
    END LOOP;
  CLOSE bonusCursor;
END Bonus_emp;
/ 
CALL Bonus_emp(0, 0.15, 0.20, 102);
SELECT * FROM bonus WHERE empno = 102;

--4.   Создайте функцию Bonus_summ(perc1, perc2, perc3, emp_par), вычисляющую суммарный налог на премию сотрудника за всё время начислений. 
--В качестве параметров передать процент налога (до 500, от 501 до 100 , выше 1000), номер сотрудника.
-- Возвращаемое значение – суммарный налог.

CREATE OR REPLACE FUNCTION Bonus_summ(perc1 IN REAL, perc2 IN REAL, perc3 IN REAL, emp_par IN INTEGER) RETURN REAL IS
  CURSOR bonusCursor (emp_par INTEGER) IS
  SELECT bc.empno, bc.month, bc.year, SUM(b.bonvalue) AS bonus_sum, AVG(b.bonvalue) AS bonus_avg
  FROM bonus bc JOIN bonus b
    ON b.empno = bc.empno AND b.year = bc.year AND b.month <= bc.month
    WHERE bc.empno = emp_par
    GROUP BY bc.empno, bc.month, bc.year;

  i bonusCursor % ROWTYPE;
  taxPercent REAL := 0;
  total REAL := 0;

  BEGIN OPEN bonusCursor (emp_par);
    LOOP FETCH bonusCursor INTO i;
      EXIT WHEN bonusCursor % NOTFOUND;
      IF i.bonus_sum <= 500 THEN taxPercent := perc1;
      ELSIF i.bonus_sum <= 1000 THEN taxPercent := perc2;
      ELSE taxPercent := perc3;
      END IF;
      total := total + i.bonus_avg * taxPercent;
    END LOOP;
  CLOSE bonusCursor;
  RETURN total;
END Bonus_summ;

/
SELECT Bonus_summ(0, 0.15, 0.20, 102) FROM dual; 


  
    